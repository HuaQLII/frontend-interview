##2023.03.02
###### Vue的生命周期？
**created：**
在Vue实例创建完毕状态，我们可以去访问data、computed、watch、methods上的方法和数据，但现在还没有将虚拟Dom挂载到真实Dom上，所以我们在此时访问不到我们的Dom元素（el属性，ref属性此时都为空）。

> 我们在此时可以进行一些简单的Ajax，并可以对页面进行初始化之类的操作

**beforeMount：** 它是在挂载之前被调用的，会在此时去找到虚拟Dom，并将其编译成Render

**mounted：** 虚拟Dom已经被挂载到真实Dom上，此时我们可以获取Dom节点，`$ref`在此时也是可以访问的。

> 我们在此时可以去获取节点信息，做Ajax请求，对节点做一些操作

**beforeupdate：** 响应式数据更新的时候会被调用，`beforeupdate`的阶段虚拟Dom还没更新，所以在此时依旧可以访问现有的Dom。

> 我们可以在此时访问现有的Dom，手动移除一些添加的监听事件

**updated：** 此时补丁已经打完了，Dom已经更新完毕，可以执行一些依赖新Dom的操作。

> 但还是不建议在此时进行数据操作，避免进入死循环（这个坑我曾经踩过）

**beforeDestroy：** 在Vue实例销毁之前被调用，在此时我们的实例还未被销毁。

> 在此时可以做一些操作，比如销毁定时器，解绑全局事件，销毁插件对象等

###### 用的最多的是那个？起到什么作用？

Mount：虚拟Dom已经被挂载到真实Dom上，此时我们可以获取Dom节点，`$ref`在此时也是可以访问的。（在点击功能页面时，某页面已经加载了）

#### 父组件传子组件怎么传的？

第一步：父组件 在引用子组件时，通过属性绑定（v-bind：）的形式，把需要传递给子组件的数据，传递到子组件内部，供子组件使用
第二步：把父组件传递过来的数据， 在 props数组 中定义一下
1.  组件中的 所有props 中的数据，都是通过父组件传递给子组件的
2.   props 中的数据都是只读的，无法重新赋值
第三步：在该子组件中使用props数组 中定义好的数据

#### 组件传值-父组件把方法传递给子组件

第一步：父组件向子组件传递方法，使用事件绑定机制 v-on，自定义一个事件属性，传递给子组件
第二步：在子组件中定义一个方法，在方法中，利用  $emit  触发 父组件传递过来的，挂载在当前实例上的事件，还可以传递参数
第三步：在子组件中调用定义的那个方法，就可以触发父组件传递过来的方法了

#### 怎么判断数据类型？

typeof（）

#### Map和ForEach的区别？
由于它们之间的主要区别在于是否有返回值，所以你会希望使用 `map` 来制作一个新的数组，而使用 `forEach` 只是为了映射到数组上。
-   能用`forEach()`做到的，`map()`同样可以。反过来也是如此。
-   `map()`会分配内存空间存储新数组并返回，`forEach()`不会返回数据。
-   `forEach()`允许`callback`更改原始数组的元素。`map()`返回新的数组。